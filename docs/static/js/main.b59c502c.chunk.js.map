{"version":3,"sources":["components/header/index.tsx","components/configuration/InputFile.tsx","components/configuration/Mode.tsx","components/configuration/Secret.tsx","components/configuration/BitLoss.tsx","components/configuration/index.tsx","components/output/output-types.tsx","components/output/index.tsx","duck/go-worker.ts","duck/index.ts","App.tsx","serviceWorker.js","index.tsx"],"names":["Header","props","className","href","target","InputFile","React","useState","initialUrl","url","setUrl","stagedUrl","setStagedUrl","err","setErr","isLoading","setLoading","setImageLoading","inputFile","useRef","onLoadFromFileSystem","a","current","files","length","Uint8Array","arrayBuffer","setInputImage","u","URL","createObjectURL","isEmpty","list","name","id","autoComplete","placeholder","value","onChange","evt","onClick","preventDefault","fetch","method","then","res","status","FailedToLoadImage","statusText","type","headers","get","toLocaleLowerCase","includes","FileTypeNotSupported","buff","catch","toString","finally","disabled","empty","src","alt","onLoad","htmlFor","accept","ref","message","Error","Mode","defaultChecked","setMode","Secret","secret","setSecret","secretFile","isBuffer","byteLength","text","slice","join","readOnly","title","v","ext","split","pop","BitLoss","defaultValue","e","setBitLoss","parseInt","Configuration","formError","setFormError","actions","state","imageBuf","mode","Fragment","setDataToHide","dataToHide","startProcess","isInvalidState","output","loading","result","Hex","selected","viewType","available","setOutputView","Array","from","map","item","style","position","Text","TextDecoder","decode","startsWith","dangerouslySetInnerHTML","__html","PNG","dataType","search","hide","imageUrl","useMemo","blob","Blob","subarray","b","every","i","PPNG","invalid","setText","useEffect","window","str","console","error","Output","document","createElement","download","click","Empty","Loading","worker","listeners","this","Worker","onmessage","event","data","log","terminate","listener","find","filter","payload","inputImage","bitLoss","Promise","rej","Date","push","postMessage","operationName","initialState","reducer","action","makeActions","dispatch","buf","veiwType","raw","myHandle","handle","PNGWorker","hideData","buffer","TextEncoder","encode","revealData","matchMedia","matches","setTimeout","scrollTo","body","scrollHeight","alert","isImage","isText","useMatchMedia","setMatches","fn","useCallback","addEventListener","removeEventListener","App","useReducer","showOutput","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4RAGe,SAASA,EAAOC,GAE3B,OACI,4BAAQC,UAAU,cACd,yBAAKA,UAAU,SACX,yBAAKA,UAAU,eACX,uBAAGC,KAAK,qDAAqDC,OAAO,UAChE,uBAAGF,UAAU,iBADjB,YAIJ,yBAAKA,UAAU,eACX,uBAAGC,KAAK,SACJ,uBAAGD,UAAU,iBADjB,cAKR,yBAAKA,UAAU,cACX,yEACA,yBAAKA,UAAU,YAAf,yD,yDCdD,SAASG,EAAUJ,GAC9B,MAAsBK,IAAMC,SAASC,GAArC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAkCJ,IAAMC,SAASC,GAAjD,mBAAOG,EAAP,KAAkBC,EAAlB,KAEA,EAAsBN,IAAMC,SAAwB,MAApD,mBAAOM,EAAP,KAAYC,EAAZ,KACA,EAAgCR,IAAMC,UAAS,GAA/C,mBAAOQ,EAAP,KAAkBC,EAAlB,KACA,EAA0CV,IAAMC,UAAS,GAAzD,mBAAuBU,GAAvB,WACMC,EAAYZ,IAAMa,OAAgC,MAElDC,EAAoB,uCAAG,gCAAAC,EAAA,yDACzBL,GAAW,GACXC,GAAgB,KAFS,UAIrBC,EAAUI,eAJW,iBAIrB,EAAmBC,aAJE,aAIrB,EAA0BC,QAJL,6BAKrBvB,EALqB,KAKGwB,WALH,SAKoBP,EAAUI,QAAQC,MAAM,GAAGG,cAL/C,4CAKfC,cALe,gBAMrBb,EAAO,MAEDc,EAAIC,IAAIC,gBAAgBZ,EAAUI,QAAQC,MAAM,IAEtDb,EAAOkB,GACPhB,EAAagB,GAXQ,QAczBZ,GAAW,GAdc,4CAAH,qDAiDpBe,EAAwB,MAAbpB,GAAmC,KAAdA,EAEtC,OACI,yBAAKT,UAAU,qBACX,yBAAKA,UAAU,SAAf,eACA,yBAAKA,UAAU,YAAf,+MAKA,yBAAKA,UAAU,kBACX,8BACI,2BACI8B,KAAK,SACLC,KAAK,MAAMC,GAAG,MACdC,aAAa,MACbC,YAAY,sBACZC,MAAO1B,EACP2B,SAAU,SAAAC,GACmB,KAArBA,EAAInC,OAAOiC,QACX3B,EAAO,IACPT,EAAM0B,cAAc,OAExBf,EAAa2B,EAAInC,OAAOiC,UAGhC,8BAAUH,GAAG,UACT,4BAAQG,MAAM,4GACd,4BAAQA,MAAM,gGACd,4BAAQA,MAAM,6GAElB,4BAAQG,QA/DF,SAACD,GACnBA,EAAIE,iBAEJzB,GAAW,GACXC,GAAgB,GAEhByB,MAAM/B,EAAW,CAAEgC,OAAQ,QACtBC,MAAK,SAAAC,GACF,GAAmB,MAAfA,EAAIC,OAAgB,MAAM,IAAIC,EAAJ,2CAA0DF,EAAIG,aAE5F,IAAMC,EAAOJ,EAAIK,QAAQC,IAAI,iBAAmB,GAEhD,IAAKF,EAAKG,oBAAoBC,SAAS,OACnC,MAAM,IAAIC,EAAJ,mDAAqEL,EAArE,yBAEV,OAAOJ,KAEVD,MAAK,SAACC,GAAD,OAAcA,EAAInB,iBACvBkB,MAAK,SAACW,GACHzC,EAAO,MACPJ,EAAOC,GACPV,EAAM0B,cAAc,IAAIF,WAAW8B,OAEtCC,OAAM,SAAC3C,GACJC,EAAOD,EAAI4C,YACX/C,EAAOC,GACPV,EAAM0B,cAAc,SACrB+B,SAAQ,WACP1C,GAAW,OAmCyB2C,SAAU5B,GAA1C,UAGR,yBAAK7B,UAAS,sBAAkBD,EAAM2D,MAAS,QAAU,KACrD,gCAGY7C,EAAkB,yBAAKb,UAAU,WAAf,cAAoC,uBAAGA,UAAU,iCACnE6B,GAAkB,MAAPtB,GAAuB,KAARA,EAAmB,yBAAKP,UAAU,SAAQ,0DACpEW,EAAY,yBAAKX,UAAU,OAAM,8BAAOW,IAErC,yBAAKgD,IAAKpD,EAAKqD,IAAI,gBAAgBC,OAAQ,kBAAM9C,GAAgB,QAIpF,yBAAKf,UAAU,aACX,2BAAO8D,QAAQ,yBAAyB9D,UAAU,OAAlD,qBAGA,2BACIgC,GAAG,yBACHe,KAAK,OACLgB,OAAO,OACP3B,SAAUlB,EACV8C,IAAKhD,MAOzB,IAAMV,EAAU,OAAG,MAAM,uKAMnBuC,E,kDACF,WAAYoB,GAAiB,uCACnB,4BAA8BA,G,sBAFZC,QAM1Bd,E,kDACF,WAAYa,GAAiB,uCACnB,+BAAiCA,G,sBAFZC,QCzIpB,SAASC,EAAKpE,GACzB,OACI,yBAAKC,UAAU,eACX,yBAAKA,UAAU,SAAf,QACA,yBAAKA,UAAU,YAAf,iHAIA,yBAAKA,UAAU,QACX,2BAAO8D,QAAQ,QACX,2BACIf,KAAK,QACLhB,KAAK,OACLI,MAAM,OACNH,GAAG,OACHoC,gBAAc,EACd9B,QAAS,kBAAMvC,EAAMsE,QAAQ,WAPrC,eAWA,2BAAOP,QAAQ,QACX,2BACIf,KAAK,QACLhB,KAAK,OACLI,MAAM,OACNH,GAAG,OACHM,QAAS,kBAAMvC,EAAMsE,QAAQ,WANrC,iBCdD,SAASC,EAAT,GAAsD,IAApCC,EAAmC,EAAnCA,OAAQC,EAA2B,EAA3BA,UAAWd,EAAgB,EAAhBA,MAC1Ce,EAAarE,IAAMa,OAAgC,MACnDyD,EAA6B,kBAAXH,GAA6C,OAAhB,OAANA,QAAM,IAANA,OAAA,EAAAA,EAAQI,YACjDC,EAAOF,EACNH,EAAsBM,MAAM,EAAG,KAAKC,KAAK,KAAO,MAC/CP,GAAkB,GAE1B,OACI,yBAAKvE,UAAU,iBACX,yBAAKA,UAAU,SAAf,uBACA,yBAAKA,UAAU,YAAf,gFACiF,6BADjF,+CAEgD,qCAFhD,8BAIA,yBAAKA,UAAU,cACX,8BACIA,WAAY0D,GAAoB,MAAVa,GAA6B,KAAXA,EAA4B,GAAV,QAC1DrC,YAAY,8DACZC,MAAOyC,EAAKrB,WACZwB,SAAUL,EACVjB,SAAUiB,EACVM,MAAON,EAAW,uDAAyD,GAC3EtC,SAAU,SAACC,GAAD,OAASmC,EAAUnC,EAAInC,OAAOiC,UAE5C,yBAAKnC,UAAU,UACX,yBAAKA,UAAU,aACX,4BAAQsC,QAAS,kBAAMkC,EAAU,QAAjC,UAEJ,yBAAKxE,UAAU,QAAf,gBACkB0E,EAAYH,EAAsBjD,OAASsD,EAAKtD,UAI1E,yBAAKtB,UAAU,aACX,2BAAO8D,QAAQ,qBAAqB9D,UAAU,OAA9C,qBAGA,2BACIgC,GAAG,qBACHe,KAAK,OACLgB,OAAO,IACPC,IAAKS,EACLrC,SAAQ,sBAAE,kCAAAjB,EAAA,qEACFsD,EAAWrD,eADT,iBACF,EAAoBC,aADlB,aACF,EAA2BC,QADzB,6BAEYC,WAFZ,SAE6BkD,EAAWrD,QAAQC,MAAM,GAAGG,cAFzD,mBAEIyD,EAFJ,eAIIC,EAAMT,EAAWrD,QAAQC,MAAM,GAAGU,KAAKoB,SAAS,MAAQsB,EAAWrD,QAAQC,MAAM,GAAGU,KAAKoD,MAAM,KAAKC,MAG1GH,EAAElC,KAAO0B,EAAWrD,QAAQC,MAAM,GAAG0B,MAAQmC,EAAM,IAAMA,EAAM,IAE/DV,EAAUS,GATR,wBAWFT,EAAU,MAXR,gDChDf,SAASa,EAAQtF,GAC5B,OACI,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,SAAf,YACA,yBAAKA,UAAU,YAAf,qGAEmB,6BAFnB,gGAKA,yBAAKA,UAAU,kBACX,4BACI+B,KAAK,UACLuD,aAAa,IACblD,SAAU,SAAAmD,GACNxF,EAAMyF,WAAWC,SAASF,EAAErF,OAAOiC,UAIvC,4BAAQA,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,a,MCXL,SAASuD,EAAc3F,GAClC,MAAkCK,IAAMC,UAAS,GAAjD,mBAAOsF,EAAP,KAAkBC,EAAlB,KAcA,OACI,yBAAK5F,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,SAAf,iBACA,yBAAKA,UAAU,YAAf,4KAKJ,kBAACG,EAAD,CAAWsB,cAAe1B,EAAM8F,QAAQpE,cAAeiC,MAAOiC,GAAsC,OAAzB5F,EAAM+F,MAAMC,WACvF,kBAAC5B,EAAD,CAAME,QAAStE,EAAM8F,QAAQxB,UACP,SAArBtE,EAAM+F,MAAME,MACT,kBAAC,IAAMC,SAAP,KACI,kBAAC3B,EAAD,CACIE,UAAWzE,EAAM8F,QAAQK,cACzB3B,OAAQxE,EAAM+F,MAAMK,WACpBzC,MAAOiC,IAEX,kBAACN,EAAD,CAASG,WAAYzF,EAAM8F,QAAQL,cAG3C,yBAAKxF,UAAU,kBACX,4BACIA,UAAS,MACTsC,QApCK,WACjB,OAA2B,MAAxBvC,EAAM+F,MAAMC,SAAyBH,GAAa,GAE7B,SAArB7F,EAAM+F,MAAME,MAA8C,MAA1BjG,EAAM+F,MAAMK,YAAiD,KAA3BpG,EAAM+F,MAAMK,YAIjFP,GAAa,QAEb7F,EAAM8F,QAAQO,gBALHR,GAAa,KA8BhB,OAMCD,GACG,0BAAM3F,UAAU,YAAhB,6CCtDb,SAASqG,EAAgBP,GACLA,EAAhBE,KAAP,IAAaM,EAAUR,EAAVQ,OAIb,OAFwBA,EAAO3F,KAAQ2F,EAAOC,UAAWD,EAAOE,OAErC,QAEPF,EAAOC,QAEL,UAEVD,EAAO3F,IAEH,MAET,KAQJ,IAAM8F,EACD,SAAC1G,GACL,GAAIsG,EAAetG,GAAQ,OAAO,KAClC,IAAM2G,EAAqC,QAA1B3G,EAAMuG,OAAOK,SACxBC,EAA2B,SAAf7G,EAAMiG,KAExB,OACI,4BACIhG,UAAS,cAAS0G,EAAW,WAAa,GAAjC,YAAuCE,EAAY,GAAK,YACjEnD,UAAWmD,EACXtE,QAAS,kBAAMvC,EAAM8G,cAAc,SAHvC,gBAPCJ,EAgBG,SAAC1G,GACT,GAAIsG,EAAetG,IAAoC,QAA1BA,EAAMuG,OAAOK,SAAoB,OAAO,KAErE,IAAM/B,EAAOkC,MAAMC,KAAMhH,EAAMuG,OAAOE,QAAuBQ,KAAI,SAAAC,GAAI,OAAIA,EAAK1D,SAAS,OAAKuB,KAAK,KAEjG,OACI,yBAAK9E,UAAU,kBAAkBkH,MAAO,CAAEC,SAAU,aAChD,6BAAMvC,KAMTwC,EACD,SAACrH,GACL,GAAIsG,EAAetG,GAAQ,OAAO,KAClC,IAAM2G,EAAqC,UAA1B3G,EAAMuG,OAAOK,SACxBC,EAA2B,SAAf7G,EAAMiG,KAExB,OACI,4BACIhG,UAAS,cAAS0G,EAAW,WAAa,GAAjC,YAAuCE,EAAY,GAAK,YACjEnD,UAAWmD,EACXtE,QAAS,kBAAMvC,EAAM8G,cAAc,WAHvC,uBAPCO,EAgBG,SAACrH,GACT,GAAIsG,EAAetG,IAAoC,UAA1BA,EAAMuG,OAAOK,SAAsB,OAAO,KAEvE,IAAM/B,GAAO,IAAIyC,aAAcC,OAAQvH,EAAMuG,OAAOE,QAEpD,OACI,yBAAKxG,UAAU,0BACV4E,EAAK2C,WAAW,UAAY,yBAAKC,wBAAyB,CAAEC,OAAQ7C,KAAa,6BAAMA,KAM3F8C,EACD,SAAC3H,GAAW,IAAD,IACf,GAAIsG,EAAetG,GAAQ,OAAO,KAClC,IAAM2G,EAAqC,QAA1B3G,EAAMuG,OAAOK,SACxBC,IAAa,UAAA7G,EAAMuG,OAAOqB,gBAAb,mBAAuBC,cAAvB,sBAAgC,yBAA0B,IAAM,EAEnF,OACI,4BACI5H,UAAS,cAAS0G,EAAW,WAAa,GAAjC,YAAuCE,EAAY,GAAK,YACjEnD,UAAWmD,EACXtE,QAAS,kBAAMvC,EAAM8G,cAAc,SAHvC,kBAPCa,EAgBG,SAAC3H,GACT,IAAM8H,EAAOxB,EAAetG,IAAoC,QAA1BA,EAAMuG,OAAOK,SAC3CX,EAAuCjG,EAAvCiG,KAAR,EAA+CjG,EAAjCuG,OAAUE,EAAxB,EAAwBA,OAAQmB,EAAhC,EAAgCA,SAE1BG,EAAW1H,IAAM2H,SAAQ,WAC3B,GAAIF,EAAM,OAAO,KAEjB,IAAI9E,EAAgB,SAATiD,EAAkB,YAAe2B,GAAY,GAExD5E,EAAOA,EAAKoC,MAAM,KAAK,GAEvB,IAAM6C,EAAO,IAAIC,KAAK,CAACzB,GAAuB,CAAEzD,SAEhD,OAAOpB,IAAIC,gBAAgBoG,KAE5B,CAACH,EAAM7B,EAAMQ,EAAQmB,IAExB,OAAIE,GAAqB,OAAbC,EAA0B,KAGlC,yBAAK9H,UAAU,mBACX,gCACI,yBAAK2D,IAAKmE,EAAUlE,IAAI,mBAtC/B8D,EA2CF,SAAClB,GACJ,IAAMrF,EAAIqF,EAAO0B,SAAS,EAAG,GACvBC,EAAI,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAExC,OAAOhH,EAAEiH,OAAM,SAACnD,EAAGoD,GAAJ,OAAUpD,IAAMkD,EAAEE,OAK5BC,EACD,SAACvI,GACL,GAAIsG,EAAetG,GAAQ,OAAO,KAClC,IAAM2G,EAAqC,SAA1B3G,EAAMuG,OAAOK,SACxBC,EAAYc,EAAU3H,EAAMuG,OAAOE,UAA2B,SAAfzG,EAAMiG,MAAkC,SAAfjG,EAAMiG,MAEpF,OACI,4BACIhG,UAAS,cAAS0G,EAAW,WAAa,GAAjC,YAAuCE,EAAY,GAAK,YACjEnD,UAAWmD,EACXtE,QAAS,kBAAMvC,EAAM8G,cAAc,UAHvC,uBAPCyB,EAgBG,SAACvI,GACT,IAAMwI,EAAUlC,EAAetG,IAAoC,SAA1BA,EAAMuG,OAAOK,SACtD,EAAwBvG,IAAMC,SAAS,IAAvC,mBAAOuE,EAAP,KAAa4D,EAAb,KAcA,OAXApI,IAAMqI,WAAU,WACPF,GACDG,OAAOhB,IAAInE,SAASxD,EAAMuG,OAAOE,QAAsB,SAAC7F,EAAKgI,GACzD,GAAIhI,EAAK,OAAOiI,QAAQC,MAAMlI,GAE9B6H,EAAQG,QAIjB,CAACJ,IAEAA,EAAgB,KAGhB,yBAAKvI,UAAU,0BACX,6BAAM4E,K,MClKP,SAASkE,EAAO/I,GAAe,IAAD,IACzC,EAAoCA,EAA5B+F,MAASE,EAAjB,EAAiBA,KAAMM,EAAvB,EAAuBA,OAUvB,OACI,yBAAKtG,UAAU,kBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,SAAf,UACA,yBAAKA,UAAU,YACD,SAATgG,GACG,oHAE0B,wCAF1B,sBAE6D,wCAF7D,gDAMM,SAATA,GACG,6GAMZ,yBAAKhG,UAAU,eACX,yBAAKA,UAAU,UACX,kBAAC,EAAUD,EAAM+F,OACjB,kBAAC,EAAY/F,EAAM+F,OACnB,kBAACW,EAAmB1G,EAAM+F,OAC1B,kBAACsB,EAAoBrH,EAAM+F,OAC3B,kBAAC4B,EAAmB3H,EAAM+F,OAC1B,kBAACwC,EAAoBvI,EAAM+F,QAE/B,yBAAK9F,UAAU,QACX,2BACCsG,EAAOE,QAAmB,SAATR,GAAoB,0DAAyBM,QAAzB,IAAyBA,GAAzB,UAAyBA,EAAQE,cAAjC,aAAyB,EAAgBlF,OAAzC,WACrCgF,EAAOE,QAAmB,SAATR,GACd,8DAC2BM,QAD3B,IAC2BA,GAD3B,UAC2BA,EAAQE,cADnC,aAC2B,EAAgBlF,OAD3C,sCAEyBgF,QAFzB,IAEyBA,OAFzB,EAEyBA,EAAQqB,SAFjC,OAOR,yBAAK3H,UAAU,gBACX,kBAAC0H,EAAD,iBAAgB3H,EAAM+F,MAAtB,CAA6Be,cAAe9G,EAAM8F,QAAQgB,iBAC1D,kBAACyB,EAAD,iBAAiBvI,EAAM+F,MAAvB,CAA8Be,cAAe9G,EAAM8F,QAAQgB,iBAC3D,kBAACO,EAAD,iBAAiBrH,EAAM+F,MAAvB,CAA8Be,cAAe9G,EAAM8F,QAAQgB,iBAC3D,kBAACJ,EAAD,iBAAgB1G,EAAM+F,MAAtB,CAA6Be,cAAe9G,EAAM8F,QAAQgB,kBACvDR,EAAetG,EAAM+F,QACpB,4BAAQ9F,UAAS,MAASsC,QArD7B,WACb,IAAMnB,EAAI4H,SAASC,cAAc,KAC3BhB,EAAO,IAAIC,KAAK,CAAC3B,EAAOE,QAAuB,CAAEzD,KAAM,6BAC7D5B,EAAElB,KAAO0B,IAAIC,gBAAgBoG,GAC7B7G,EAAE8H,SAAW,YAAc3C,EAAOqB,SAClCxG,EAAE+H,UAgDc,sBAUxB,IAAMC,EAAQ,SAACpJ,GACX,MAA8B,UAA1BsG,EAAetG,GAA2B,KAG1C,yBAAKC,UAAU,qBACX,wEAMNoJ,EAAU,SAACrJ,GACb,MAA8B,YAA1BsG,EAAetG,GAA6B,KAG5C,yBAAKC,UAAU,uBACX,wD,eCrCG,M,WAnDX,aAAe,IAAD,gCAHPqJ,YAGO,OAFNC,UAAkE,GAGtEC,KAAKF,OAAS,IAAIG,OAAO,gBACzBD,KAAKF,OAAOI,UAAY,SAACC,GACrB,GAAwB,uBAApBA,EAAMC,KAAK5G,KAGX,OAFA6F,QAAQgB,IAAI,mBAAqBF,EAAMC,KAAKd,OAErC,EAAKQ,OAAOQ,YAGvB,GAAwB,sBAApBH,EAAMC,KAAK5G,KAA8B,CACzC,IAAM+G,EAAW,EAAKR,UAAUS,MAAK,SAAA5I,GAAC,OAAIA,EAAE,KAAOuI,EAAMC,KAAK3H,MAE9D,GAAgB,MAAZ8H,EAAkB,OAUtB,OARA,EAAKR,UAAY,EAAKA,UAAUU,QAAO,SAAA7I,GAAC,OAAIA,EAAE,KAAOuI,EAAMC,KAAK3H,WAE5D0H,EAAMC,KAAKd,MACXiB,EAAS,GAAGJ,EAAMC,KAAKd,OAEvBiB,EAAS,GAAGJ,EAAMC,KAAKM,Y,4CAQvC,SACIC,EACAP,EACAhC,EACAwC,GACiD,IAAD,OAChD,OAAO,IAAIC,SAAQ,SAACzH,EAAK0H,GACrB,IAAMrI,GAAM,IAAIsI,KAEhB,EAAKhB,UAAUiB,KAAK,CAACvI,EAAIW,EAAK0H,IAC9B,EAAKhB,OAAOmB,YAAY,CAAEzH,KAAM,YAAa0H,cAAe,WAAYP,aAAYP,OAAMhC,WAAUwC,UAASnI,Y,wBAIrH,SAAkBkI,GAA2E,IAAD,OACxF,OAAO,IAAIE,SAAQ,SAACzH,EAAK0H,GACrB,IAAMrI,GAAM,IAAIsI,KAEhB,EAAKhB,UAAUiB,KAAK,CAACvI,EAAIW,EAAK0H,IAC9B,EAAKhB,OAAOmB,YAAY,CAAEzH,KAAM,YAAa0H,cAAe,aAAcP,aAAYlI,c,MC5BrF0I,EAAsB,CAC/B3E,SAAU,KACVC,KAAM,OACNG,WAAY,GACZgE,QAAS,EACT7D,OAAQ,CACJK,SAAU,MACVH,OAAQ,KACR7F,IAAK,KACL4F,SAAS,IAIF,SAASoE,IAAsD,IAA9C7E,EAA6C,uDAArC4E,EAAcE,EAAuB,uCACzE,OAAOA,EAAO7H,MACV,IAAK,iBACD,OAAO,2BAAK+C,GAAZ,IAAmBC,SAAU6E,EAAOjB,KAAMrD,OAAO,eAAMoE,EAAapE,UACxE,IAAK,WACD,OAAO,2BAAKR,GAAZ,IAAmBE,KAAM4E,EAAOjB,KAAMrD,OAAO,eAAMoE,EAAapE,UACpE,IAAK,mBACD,OAAO,2BAAKR,GAAZ,IAAmBK,WAAYyE,EAAOjB,OAC1C,IAAK,cACD,OAAO,2BAAK7D,GAAZ,IAAmBqE,QAASS,EAAOjB,OACvC,IAAK,uBACD,OAAO,2BAAK7D,GAAZ,IAAmBQ,OAAO,2BAAMR,EAAMQ,QAAb,IAAqBK,SAAUiE,EAAOjB,SACnE,IAAK,WACD,OAAO,2BAAK7D,GAAZ,IAAmBQ,OAAO,2BAAMR,EAAMQ,QAAWsE,EAAOjB,QAE5D,QACI,OAAO7D,GAaZ,SAAS+E,EAAT,GAA8F,IAAD,mBAAvE/E,EAAuE,KAAhEgF,EAAgE,KAChG,MAAO,CAAChF,EAAO,CACXrE,cADW,SACGsJ,GACVD,EAAS,CAAE/H,KAAM,iBAAkB4G,KAAMoB,KAE7C1G,QAJW,SAIH2B,GACJ8E,EAAS,CAAE/H,KAAM,WAAY4G,KAAM3D,KAEvCE,cAPW,SAOG6E,GACVD,EAAS,CAAE/H,KAAM,mBAAoB4G,KAAMoB,KAE/CvF,WAVW,SAUA2E,GACPW,EAAS,CAAE/H,KAAM,cAAe4G,KAAMQ,KAE1CtD,cAbW,SAaGmE,GACVF,EAAS,CAAE/H,KAAM,uBAAwB4G,KAAMqB,KAEnD5E,aAhBW,WAiBP0E,EAAS,CAAE/H,KAAM,WAAY4G,KAAM,CAC/BnD,OAAQ,KACR7F,IAAK,KACL4F,SAAS,KAGb,IA2DU0E,EA3DJC,EAAW,SAACvK,EAAmBgJ,GAApB,IAAsChC,EAAtC,uDAAyD,GAAzD,OAAgEwD,EAAOxK,EAAKgJ,EAAMhC,EAAU7B,EAAME,KAAM8E,IAEzH,GAAmB,SAAfhF,EAAME,KAAiB,CAAC,IAAD,EAEnB2B,EAAQ,UAAG7B,EAAMK,kBAAT,aAAG,EAAkBpD,KAED,kBAArB+C,EAAMK,aACbwB,EAAW7B,EAAMK,WAAWoB,WAAW,UAAY,iBAAmB,kBAG1E6D,EAAUC,SAASvF,EAAMC,UAiDnBkF,EAjD2CnF,EAAMK,WAkD9D8E,EAAmBK,OAAgBL,GAEjC,IAAIM,aAAcC,OAAOP,IApDgDtD,EAAU7B,EAAMqE,SAASzH,MAAK,SAAAC,GAC9FuI,EAAS,KAAMvI,EAAIgH,KAAMhH,EAAIgF,aAC9BrE,OAAM,SAAA3C,GACLuK,EAASvK,EAAK,IAAIY,WAAc,YAGpC6J,EAAUK,WAAW3F,EAAMC,UAAWrD,MAAK,SAAAC,GACvCuI,EAAS,KAAMvI,EAAIgH,KAAMhH,EAAIgF,aAC9BrE,OAAM,SAAA3C,GACLuK,EAASvK,EAAK,IAAIY,WAAc,OAKpCmK,WAAW,iCAAiCC,QAASC,YAAW,kBAAMlD,OAAOmD,SAAS,EAAG9C,SAAS+C,KAAKC,gBAAe,KACrHrD,OAAOmD,SAAS,EAAG,MAKpC,IAAMV,EAAS,SAACxK,EAAmBgJ,GAAqG,IAAnFhC,EAAkF,uDAA/D,GAAI3B,EAA2D,uCAA7C8E,EAA6C,uCACnI,GAAInK,EAEA,OADAqL,MAAMrL,GACCmK,EAAS,CACZ/H,KAAM,WACN4G,KAAM,CACFnD,OAAQ,KACR7F,IAAKA,EACL4F,SAAS,KAMrB,IAAM0F,EAAUtE,EAASC,OAAO,uBAAyB,GAAc,SAAT5B,EACxDkG,EAASvE,EAASC,OAAO,WAAa,EAE5CkD,EAAS,CACL/H,KAAM,WACN4G,KAAM,CACFnD,OAAQmD,EACRhJ,IAAK,KACL4F,SAAS,EACTI,SAAUsF,EAAU,MAAQC,EAAS,QAAU,MAC/CvE,SAAmB,SAAT3B,EAAkB,gBAAkB2B,MC/G1D,IAAMwE,EAAgB,SAACxD,GACtB,MAA8BvI,IAAMC,SAASqL,WAAW/C,GAAKgD,SAA7D,mBAAOA,EAAP,KAAgBS,EAAhB,KACMC,EAAKjM,IAAMkM,aAAY,WAC5BF,EAAWV,WAAW/C,GAAKgD,WACzB,CAAChD,IAUJ,OARAvI,IAAMqI,WAAU,WAGf,OAFAC,OAAO6D,iBAAiB,SAAUF,GAE3B,WACN3D,OAAO8D,oBAAoB,SAAUH,MAEpC,CAACA,IAEGV,GAGOc,EAzCf,WACC,MAAyB5B,EAAYzK,IAAMsM,WAAW/B,EAASD,IAA/D,mBAAO5E,EAAP,KAAcD,EAAd,KAGM8G,GAFUR,EAAc,kCAEErG,EAAMQ,OAAOE,OAE7C,OACC,yBAAKxG,UAAU,OACd,kBAACF,EAAD,MACA,8BACC,iCACC,kBAAC4F,EAAD,CAAeI,MAAOA,EAAOD,QAASA,KAEtC8G,GACA,iCACC,kBAAC7D,EAAD,CAAQhD,MAAOA,EAAOD,QAASA,QCVjB+G,QACW,cAA7BlE,OAAOmE,SAASC,UAEe,UAA7BpE,OAAOmE,SAASC,UAEhBpE,OAAOmE,SAASC,SAASC,MACvB,2DCaNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnE,SAASoE,eAAe,SDgGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5K,MAAK,SAAA6K,GACJA,EAAaC,gBAEdlK,OAAM,SAAAuF,GACLD,QAAQC,MAAMA,EAAM5E,c","file":"static/js/main.b59c502c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.scss';\r\n\r\nexport default function Header(props: any) {\r\n\r\n    return (\r\n        <header className=\"app-header\">\r\n            <div className=\"icons\">\r\n                <div className=\"icon github\">\r\n                    <a href=\"https://github.com/pedrooaugusto/steganography-png\" target=\"_blank\">\r\n                        <i className=\"fa fa-github\" /> Github\r\n                    </a>\r\n                </div>\r\n                <div className=\"icon medium\">\r\n                    <a href=\"#dois\">\r\n                        <i className=\"fa fa-medium\" /> Article\r\n                    </a>\r\n                </div>\r\n            </div>\r\n            <div className=\"main-title\">\r\n                <h1>Portable Network Graphics & Steganography</h1>\r\n                <div className=\"subtitle\">Hiding and retrieving secret files inside PNG files</div>\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React from 'react';\r\n\r\ntype InputFileProps = {\r\n    setInputImage: (input: Uint8Array | null) => void,\r\n    empty: boolean\r\n}\r\n\r\nexport default function InputFile(props: InputFileProps) {\r\n    const [url, setUrl] = React.useState(initialUrl);\r\n    const [stagedUrl, setStagedUrl] = React.useState(initialUrl);\r\n\r\n    const [err, setErr] = React.useState<string | null>(null);\r\n    const [isLoading, setLoading] = React.useState(false);\r\n    const [isImageLoading, setImageLoading] = React.useState(false);\r\n    const inputFile = React.useRef<HTMLInputElement | null>(null);\r\n\r\n    const onLoadFromFileSystem = async function () {\r\n        setLoading(true);\r\n        setImageLoading(true);\r\n\r\n        if (inputFile.current?.files?.length) {\r\n            props.setInputImage(new Uint8Array(await inputFile.current.files[0].arrayBuffer()));\r\n            setErr(null);\r\n\r\n            const u = URL.createObjectURL(inputFile.current.files[0]);\r\n\r\n            setUrl(u);\r\n            setStagedUrl(u);\r\n        }\r\n\r\n        setLoading(false);\r\n    }\r\n\r\n    const onLoadFromUrl = (evt: React.MouseEvent) => {\r\n        evt.preventDefault()\r\n\r\n        setLoading(true);\r\n        setImageLoading(true);\r\n\r\n        fetch(stagedUrl, { method: 'GET' })\r\n            .then(res => {\r\n                if (res.status !== 200) throw new FailedToLoadImage(`Request response was not ok:\\n\\t'${res.statusText}`);\r\n\r\n                const type = res.headers.get('content-type') || '';\r\n\r\n                if (!type.toLocaleLowerCase().includes('png'))\r\n                    throw new FileTypeNotSupported(`Input file must be a png image!\\n\\tType \"${type}\" is not \"image/png\"`);\r\n\r\n                return res;\r\n            })\r\n            .then((res: any) => res.arrayBuffer())\r\n            .then((buff: ArrayBuffer) => {\r\n                setErr(null);\r\n                setUrl(stagedUrl);\r\n                props.setInputImage(new Uint8Array(buff));\r\n            })\r\n            .catch((err: Error) => {\r\n                setErr(err.toString());\r\n                setUrl(stagedUrl);\r\n                props.setInputImage(null);\r\n            }).finally(() => {\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    const isEmpty = (stagedUrl == null || stagedUrl === '')\r\n\r\n    return (\r\n        <div className=\"config input-file\">\r\n            <div className=\"title\">Input image</div>\r\n            <div className=\"subtitle\">\r\n                The input file must be a PNG image, you can either load from the file system\r\n                or from an external URL. This is the image in which the secret is hidden or\r\n                the secret will be hidden (depending on the mode).\r\n            </div>\r\n            <div className=\"load-url-input\">\r\n                <form>\r\n                    <input\r\n                        list=\"images\"\r\n                        name=\"url\" id=\"url\"\r\n                        autoComplete=\"off\"\r\n                        placeholder=\"Insert png url here\"\r\n                        value={stagedUrl}\r\n                        onChange={evt => {\r\n                            if (evt.target.value === '') {\r\n                                setUrl('')\r\n                                props.setInputImage(null)\r\n                            }\r\n                            setStagedUrl(evt.target.value)\r\n                        }}\r\n                    />\r\n                    <datalist id=\"images\">\r\n                        <option value=\"https://raw.githubusercontent.com/pedrooaugusto/steganography-png/master/imagepack/suspicious-pitou.png\"/>\r\n                        <option value=\"https://raw.githubusercontent.com/pedrooaugusto/steganography-png/master/imagepack/jinx.png\"/>\r\n                        <option value=\"https://raw.githubusercontent.com/pedrooaugusto/steganography-png/master/imagepack/suspicious-bisky.png\"/>\r\n                    </datalist>\r\n                    <button onClick={onLoadFromUrl} disabled={isEmpty}>Load</button>\r\n                </form>\r\n            </div>\r\n            <div className={`preview-img ${(props.empty) ? 'empty' : ''}`}>\r\n                <figure>\r\n                    {/* Ugly! */}\r\n                    {(() => {\r\n                        if (isLoading) return <div className=\"loading\">Loading... <i className=\"fa-3x fa fa-spinner fa-spin\"></i></div>\r\n                        if (isEmpty || url == null || url === '') return <div className=\"empty\"><b>EMPTY PREVIEW -- NO IMAGE!</b></div>\r\n                        if (err) return <div className=\"err\"><span>{err}</span></div>\r\n\r\n                        return <img src={url} alt=\"Input preview\" onLoad={() => setImageLoading(false)}/>\r\n                    })()}\r\n                </figure>\r\n            </div>\r\n            <div className=\"load-file\">\r\n                <label htmlFor=\"file-upload-input-file\" className=\"btn\">\r\n                    Or Load From File\r\n                </label>\r\n                <input\r\n                    id=\"file-upload-input-file\"\r\n                    type=\"file\"\r\n                    accept=\".png\"\r\n                    onChange={onLoadFromFileSystem}\r\n                    ref={inputFile}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst initialUrl = '' ?? 'https://vignette.wikia.nocookie.net/anicrossbr/images/2/20/109_-_Neferpitou_portrait.png/revision/latest/scale-to-width-down/340?cb=20160308215759&path-prefix=pt-br';\r\n\r\ntype Error = {\r\n    message: string\r\n};\r\n\r\nclass FailedToLoadImage extends Error {\r\n    constructor(message: string){\r\n        super('Failed to load image:\\n\\t' + message);\r\n    }\r\n}\r\n\r\nclass FileTypeNotSupported extends Error {\r\n    constructor(message: string){\r\n        super('File type not supported:\\n\\t' + message);\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default function Mode(props: { setMode: (mode: 'HIDE' | 'FIND') => void }) {\r\n    return (\r\n        <div className=\"config mode\">\r\n            <div className=\"title\">Mode</div>\r\n            <div className=\"subtitle\">\r\n                You can either search for a secret hidden inside the input image or hide a new\r\n                secret inside the input image.\r\n            </div>\r\n            <div className=\"opts\">\r\n                <label htmlFor=\"hide\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"mode\"\r\n                        value=\"hide\"\r\n                        id=\"hide\"\r\n                        defaultChecked\r\n                        onClick={() => props.setMode('HIDE')}\r\n                    />\r\n                    Hide secret\r\n                </label>\r\n                <label htmlFor=\"find\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"mode\"\r\n                        value=\"find\"\r\n                        id=\"find\"\r\n                        onClick={() => props.setMode('FIND')}\r\n                    />\r\n                    Find secret\r\n                </label>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\ntype Props = {\r\n    setSecret: (data: Uint8Array | null | string) => void,\r\n    secret: string | Uint8Array | null | undefined,\r\n    empty: boolean\r\n}\r\n\r\nexport default function Secret({ secret, setSecret, empty }: Props) {\r\n    const secretFile = React.useRef<HTMLInputElement | null>(null);\r\n    const isBuffer = typeof secret !== 'string' && secret?.byteLength != null\r\n    const text = isBuffer\r\n        ? (secret as Uint8Array).slice(0, 100).join(' ') + '...'\r\n        : !!secret ? secret : ''\r\n\r\n    return (\r\n        <div className=\"config secret\">\r\n            <div className=\"title\">Secret to be hidden</div>\r\n            <div className=\"subtitle\">\r\n                The secret can be a plain text message or a file loaded from the file system.<br/>\r\n                Plain text messages where the first line is <b>#!HTML</b> will be rendered as HTML.\r\n            </div>\r\n            <div className=\"plain-text\">\r\n                <textarea\r\n                    className={(empty && (secret == null || secret === '')) ? 'empty' : ''}\r\n                    placeholder=\"Type here the secret message to hide inside the input image\"\r\n                    value={text.toString()}\r\n                    readOnly={isBuffer}\r\n                    disabled={isBuffer}\r\n                    title={isBuffer ? 'You cannot edit content loaded directly from a file!' : ''}\r\n                    onChange={(evt) => setSecret(evt.target.value)}\r\n                ></textarea>\r\n                <div className=\"footer\">\r\n                    <div className=\"clear-all\">\r\n                        <button onClick={() => setSecret(null)}>Clear</button>\r\n                    </div>\r\n                    <div className=\"info\">\r\n                        Data Length: {isBuffer ? (secret as Uint8Array).length : text.length}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"load-file\">\r\n                <label htmlFor=\"file-upload-secret\" className=\"btn\">\r\n                    Or Load From File\r\n                </label>\r\n                <input\r\n                    id=\"file-upload-secret\"\r\n                    type=\"file\"\r\n                    accept=\"*\"\r\n                    ref={secretFile}\r\n                    onChange={async function(this: HTMLInputElement) {\r\n                        if (secretFile.current?.files?.length) {\r\n                            const v = new Uint8Array(await secretFile.current.files[0].arrayBuffer())\r\n\r\n                            const ext = secretFile.current.files[0].name.includes('.') && secretFile.current.files[0].name.split('.').pop()\r\n\r\n                            // @ts-ignore\r\n                            v.type = secretFile.current.files[0].type + (ext ? '.' + ext : '')\r\n\r\n                            setSecret(v);\r\n                        } else {\r\n                            setSecret(null);\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function BitLoss(props: { setBitLoss: Function }) {\r\n    return (\r\n        <div className=\"config bit-loss\">\r\n            <div className=\"title\">Bit Loss</div>\r\n            <div className=\"subtitle\">\r\n                Given one byte of the input image, how many bits, of this byte, we should dedicate\r\n                to the secret ?<br/>\r\n                Eg: Using bitloss = 4; Would take 2 bytes of the input image to encode 1 byte of the secret.\r\n            </div>\r\n            <div className=\"bit-loss-input\">\r\n                <select\r\n                    name=\"bitloss\"\r\n                    defaultValue=\"8\"\r\n                    onChange={e => {\r\n                        props.setBitLoss(parseInt(e.target.value))\r\n                    }\r\n                }>\r\n\r\n                    <option value=\"1\">1 bit</option>\r\n                    <option value=\"2\">2 bits</option>\r\n                    <option value=\"4\">4 bits</option>\r\n                    <option value=\"6\">6 bits</option>\r\n                    <option value=\"8\">8 bits</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport InputFile from './InputFile';\r\nimport Mode from './Mode';\r\nimport Secret from './Secret';\r\nimport BitLoss from './BitLoss';\r\nimport { Actions, State } from '../../duck';\r\nimport './style.scss';\r\n\r\ntype Props = {\r\n    state: State,\r\n    actions: Actions\r\n};\r\n\r\nexport default function Configuration(props: Props) {\r\n    const [formError, setFormError] = React.useState(false)\r\n\r\n    const startProcess = () => {\r\n        if(props.state.imageBuf == null) return setFormError(true)\r\n\r\n        if(props.state.mode === 'HIDE' && (props.state.dataToHide == null || props.state.dataToHide === '' )) {\r\n            return setFormError(true)\r\n        }\r\n\r\n        setFormError(false)\r\n\r\n        props.actions.startProcess()\r\n    }\r\n\r\n    return (\r\n        <div className=\"config-section\">\r\n            <div className=\"main-title\">\r\n                <div className=\"title\">Configuration</div>\r\n                <div className=\"subtitle\">\r\n                    Here you can specify which parameters to apply during the proccess, such as\r\n                    the input image, mode (hide secret or reveal secret), bit loss and the secret to be hidden.\r\n                </div>\r\n            </div>\r\n            <InputFile setInputImage={props.actions.setInputImage} empty={formError && props.state.imageBuf === null} />\r\n            <Mode setMode={props.actions.setMode} />\r\n            {props.state.mode !== 'FIND' && (\r\n                <React.Fragment>\r\n                    <Secret\r\n                        setSecret={props.actions.setDataToHide}\r\n                        secret={props.state.dataToHide}\r\n                        empty={formError}\r\n                    />\r\n                    <BitLoss setBitLoss={props.actions.setBitLoss} />\r\n                </React.Fragment>\r\n            )}\r\n            <div className=\"submit-section\">\r\n                <button\r\n                    className={`btn`}\r\n                    onClick={startProcess}\r\n                >\r\n                    GO!\r\n                </button>\r\n                {formError && (\r\n                    <span className=\"subtitle\">Pleae fill in all the required fields! </span>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { State } from '../../duck'\r\n\r\nexport function isInvalidState (state: State): 'ERR' | 'LOADING' | 'EMPTY' | null {\r\n    const {mode, output} = state\r\n\r\n    const thereIsOutput = (!output.err && !output.loading && output.result)\r\n\r\n    if (!thereIsOutput) return 'EMPTY'\r\n\r\n    const isLoading = !!output.loading\r\n\r\n    if (isLoading) return 'LOADING'\r\n\r\n    const err = output.err\r\n\r\n    if (err) return 'ERR'\r\n\r\n    return null\r\n}\r\n\r\ninterface OutputMode {\r\n    Button: (props: State & { setOutputView: (type: 'PNG' | 'HEX' | 'PPNG' | 'PLAIN') => void }) => JSX.Element | null\r\n    OutputView: (props: State) => JSX.Element | null\r\n}\r\n\r\nexport const Hex: OutputMode = {\r\n    Button: (props) => {\r\n        if (isInvalidState(props)) return null\r\n        const selected = props.output.viewType === 'HEX'\r\n        const available = props.mode === 'FIND'\r\n\r\n        return (\r\n            <button\r\n                className={`btn ${selected ? 'selected' : ''} ${available ? '' : 'disabled'}`}\r\n                disabled={!available}\r\n                onClick={() => props.setOutputView('HEX')}\r\n            >\r\n                Show as Hex\r\n            </button>\r\n        )\r\n    },\r\n    OutputView: (props) => {\r\n        if (isInvalidState(props) || props.output.viewType !== 'HEX') return null\r\n\r\n        const text = Array.from((props.output.result as Uint8Array)).map(item => item.toString(16)).join(\" \")\r\n\r\n        return (\r\n            <div className=\"output-type hex\" style={{ position: 'absolute' }}>\r\n                <pre>{text}</pre>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Text: OutputMode = {\r\n    Button: (props) => {\r\n        if (isInvalidState(props)) return null\r\n        const selected = props.output.viewType === 'PLAIN'\r\n        const available = props.mode === 'FIND'\r\n\r\n        return (\r\n            <button\r\n                className={`btn ${selected ? 'selected' : ''} ${available ? '' : 'disabled'}`}\r\n                disabled={!available}\r\n                onClick={() => props.setOutputView('PLAIN')}\r\n            >\r\n                Show as Plain Text\r\n            </button>\r\n        )\r\n    },\r\n    OutputView: (props) => {\r\n        if (isInvalidState(props) || props.output.viewType !== 'PLAIN') return null\r\n\r\n        const text = new TextDecoder().decode((props.output.result as Uint8Array))\r\n\r\n        return (\r\n            <div className=\"output-type plain-text\">\r\n                {text.startsWith(\"#!HTML\") ? <div dangerouslySetInnerHTML={{ __html: text }} /> : <pre>{text}</pre>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const PNG: OutputMode & { isPng: Function } = {\r\n    Button: (props) => {\r\n        if (isInvalidState(props)) return null\r\n        const selected = props.output.viewType === 'PNG'\r\n        const available = (props.output.dataType?.search?.(/png|gif|jpg|jpeg/gi) || -1) >= 0\r\n\r\n        return (\r\n            <button\r\n                className={`btn ${selected ? 'selected' : ''} ${available ? '' : 'disabled'}`}\r\n                disabled={!available}\r\n                onClick={() => props.setOutputView('PNG')}\r\n            >\r\n                Show as Image\r\n            </button>\r\n        )\r\n    },\r\n    OutputView: (props) => {\r\n        const hide = isInvalidState(props) || props.output.viewType !== 'PNG'\r\n        const { mode, output: { result, dataType } } = props\r\n\r\n        const imageUrl = React.useMemo(() => {\r\n            if (hide) return null\r\n\r\n            let type = mode === 'HIDE' ? 'image/png' : (dataType || '')\r\n\r\n            type = type.split(\".\")[0]\r\n\r\n            const blob = new Blob([result as Uint8Array], { type })\r\n\r\n            return URL.createObjectURL(blob)\r\n    \r\n        }, [hide, mode, result, dataType])\r\n\r\n        if (hide || imageUrl === null) return null\r\n\r\n        return (\r\n            <div className=\"output-type png\">\r\n                <figure>\r\n                    <img src={imageUrl} alt=\"Output file\" />\r\n                </figure>\r\n            </div>\r\n        )\r\n    },\r\n    isPng: (result: Uint8Array) => {\r\n        const a = result.subarray(0, 8)\r\n        const b = [137, 80, 78, 71, 13, 10, 26, 10]\r\n\r\n        return a.every((v, i) => v === b[i])\r\n    }\r\n}\r\n\r\n// Parsed PNG view\r\nexport const PPNG: OutputMode = {\r\n    Button: (props) => {\r\n        if (isInvalidState(props)) return null\r\n        const selected = props.output.viewType === 'PPNG'\r\n        const available = PNG.isPng(props.output.result) && (props.mode === 'FIND' || props.mode === 'HIDE')\r\n\r\n        return (\r\n            <button\r\n                className={`btn ${selected ? 'selected' : ''} ${available ? '' : 'disabled'}`}\r\n                disabled={!available}\r\n                onClick={() => props.setOutputView('PPNG')}\r\n            >\r\n                Show as Parsed PNG\r\n            </button>\r\n        )\r\n    },\r\n    OutputView: (props) => {\r\n        const invalid = isInvalidState(props) || props.output.viewType !== 'PPNG'\r\n        const [text, setText] = React.useState('')\r\n\r\n        // Please, dont do it here. Move it to somewhere else later.\r\n        React.useEffect(() => {\r\n            if (!invalid) {\r\n                window.PNG.toString(props.output.result as Uint8Array, (err, str) => {\r\n                    if (err) return console.error(err)\r\n\r\n                    setText(str)\r\n                })\r\n            }\r\n\r\n        }, [invalid])\r\n\r\n        if (invalid) return null\r\n\r\n        return (\r\n            <div className=\"output-type png-parsed\">\r\n                <pre>{text}</pre>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { Actions, State } from '../../duck'\r\nimport { Hex, Text, isInvalidState, PNG, PPNG } from './output-types'\r\nimport './style.scss'\r\n\r\ntype Props = {\r\n    state: State,\r\n    actions: Actions\r\n}\r\n\r\nexport default function Output(props: Props) {\r\n    const { state: { mode, output } } = props\r\n\r\n    const download = () => {\r\n        const a = document.createElement('a')\r\n        const blob = new Blob([output.result as Uint8Array], { type: 'application/octet-stream' })\r\n        a.href = URL.createObjectURL(blob)\r\n        a.download = 'download-' + output.dataType\r\n        a.click()\r\n    }\r\n\r\n    return (\r\n        <div className=\"output-section\">\r\n            <div className=\"main-title\">\r\n                <div className=\"title\">Output</div>\r\n                <div className=\"subtitle\">\r\n                    {mode === 'HIDE' && (\r\n                        <span>\r\n                            This is the resultant image with the secret hidden deep down\r\n                            in the pixels of each <i>scanline.</i> Higher values for <i>bit loss </i>\r\n                            produces images with a high volume of noise.\r\n                        </span>\r\n                    )}\r\n                    {mode === 'FIND' && (\r\n                        <span>\r\n                            This is what we found after looking for a hidden secret inside this image\r\n                        </span>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <div className=\"result-file\">\r\n                <div className=\"output\">\r\n                    <Empty {...props.state} />\r\n                    <Loading {...props.state} />\r\n                    <Hex.OutputView {...props.state} />\r\n                    <Text.OutputView {...props.state} />\r\n                    <PNG.OutputView {...props.state} />\r\n                    <PPNG.OutputView {...props.state} />\r\n                </div>\r\n                <div className=\"info\">\r\n                    <b>\r\n                    {output.result && mode === 'HIDE' && (<span>New Image Length: {output?.result?.length} bytes;</span>)}\r\n                    {output.result && mode === 'FIND' && (\r\n                        <span>\r\n                            Hidden Secret Length: {output?.result?.length} bytes;\r\n                            Hidden Secret Type: {output?.dataType};\r\n                        </span>\r\n                    )}\r\n                    </b>\r\n                </div>\r\n                <div className=\"view-options\">\r\n                    <PNG.Button {...props.state} setOutputView={props.actions.setOutputView} />\r\n                    <PPNG.Button {...props.state} setOutputView={props.actions.setOutputView} />\r\n                    <Text.Button {...props.state} setOutputView={props.actions.setOutputView} />\r\n                    <Hex.Button {...props.state} setOutputView={props.actions.setOutputView} />\r\n                    { !isInvalidState(props.state) && (\r\n                        <button className={`btn`} onClick={download}>\r\n                            Download Output\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Empty = (props: State) => {\r\n    if (isInvalidState(props) !== 'EMPTY') return null\r\n\r\n    return (\r\n        <div className=\"output-type empty\">\r\n            <p>Please, fill in the Configuration form.</p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst Loading = (props: State) => {\r\n    if (isInvalidState(props) !== 'LOADING') return null\r\n\r\n    return (\r\n        <div className=\"output-type loading\">\r\n            <h4>Loading please wait...</h4>\r\n        </div>\r\n    )\r\n}","class PortableNetWorkGraphicsWorker {\r\n    public worker: Worker\r\n    private listeners: [number, (val: any) => void, (err: Error) => void][] = []\r\n\r\n    constructor() {\r\n        this.worker = new Worker('go-worker.js')\r\n        this.worker.onmessage = (event) => {\r\n            if (event.data.type === 'ErrorLoadingWorker') {\r\n                console.log('Killing Worker: ' + event.data.error)\r\n\r\n                return this.worker.terminate()\r\n            }\r\n\r\n            if (event.data.type === 'OperationResponse') {\r\n                const listener = this.listeners.find(a => a[0] === event.data.id)\r\n\r\n                if (listener == null) return\r\n\r\n                this.listeners = this.listeners.filter(a => a[0] !== event.data.id)\r\n\r\n                if (event.data.error) {\r\n                    listener[2](event.data.error)\r\n                } else {\r\n                    listener[1](event.data.payload)\r\n                }\r\n\r\n                return\r\n            }\r\n        }\r\n    }\r\n\r\n    public hideData(\r\n        inputImage: Uint8Array,\r\n        data: Uint8Array,\r\n        dataType: string,\r\n        bitLoss: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined\r\n    ): Promise<{ data: Uint8Array, dataType?: string }> {\r\n        return new Promise((res, rej) => {\r\n            const id = +new Date()\r\n\r\n            this.listeners.push([id, res, rej])\r\n            this.worker.postMessage({ type: 'Operation', operationName: 'hideData', inputImage, data, dataType, bitLoss, id })\r\n        })\r\n    }\r\n\r\n    public revealData(inputImage: Uint8Array): Promise<{ data: Uint8Array, dataType?: string }> {\r\n        return new Promise((res, rej) => {\r\n            const id = +new Date()\r\n\r\n            this.listeners.push([id, res, rej])\r\n            this.worker.postMessage({ type: 'Operation', operationName: 'revealData', inputImage, id })\r\n        })\r\n    }\r\n}\r\n\r\nexport default new PortableNetWorkGraphicsWorker()\r\n\r\n\r\n// export default function getPNGWorkerInstance() {\r\n//     if (worker == null) {\r\n//         worker = new Worker('go-worker.js')\r\n//         worker.onmessage = function (event) {\r\n//             if (event.data.type === 'ErrorLoadingWorker') {\r\n//                 console.log('Killing Worker: ' + event.data.error)\r\n\r\n//                 return this.terminate()\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     return worker\r\n// }\r\n\r\n// @ts-ignore\r\n// window.getWorkerInstance = getWorkerInstance\r\n","import PNGWorker from './go-worker'\r\n\r\nexport type State = {\r\n    imageBuf: Uint8Array | null,\r\n    mode: 'HIDE' | 'FIND',\r\n    dataToHide?: Uint8Array | string | null,\r\n    bitLoss?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8,\r\n    output: {\r\n        viewType: 'PNG' | 'PPNG' | 'PLAIN' | 'HEX',\r\n        result: Uint8Array | null,\r\n        dataType?: string,\r\n        err: Error | null,\r\n        loading: boolean\r\n    }\r\n}\r\n\r\ntype Action = {\r\n    type: 'SET_IMAGE_BUFF' | 'SET_MODE' | 'SET_DATA_TO_HIDE' | 'SET_BITLOSS' |\r\n        'PROCCESS' | 'CHANGE_OUTPUT_VIEW_MODE' | 'SET_OUTPUT_VIEW_TYPE',\r\n    data: any\r\n}\r\n\r\nexport const initialState: State = {\r\n    imageBuf: null,\r\n    mode: 'HIDE',\r\n    dataToHide: '',\r\n    bitLoss: 8,\r\n    output: {\r\n        viewType: 'PNG',\r\n        result: null,\r\n        err: null,\r\n        loading: false\r\n    }\r\n}\r\n\r\nexport default function reducer(state = initialState, action: Action): State {\r\n    switch(action.type) {\r\n        case 'SET_IMAGE_BUFF':\r\n            return { ...state, imageBuf: action.data, output: { ...initialState.output } }\r\n        case 'SET_MODE':\r\n            return { ...state, mode: action.data, output: { ...initialState.output } }\r\n        case 'SET_DATA_TO_HIDE':\r\n            return { ...state, dataToHide: action.data }\r\n        case 'SET_BITLOSS':\r\n            return { ...state, bitLoss: action.data }\r\n        case 'SET_OUTPUT_VIEW_TYPE':\r\n            return { ...state, output: { ...state.output, viewType: action.data } }\r\n        case 'PROCCESS':\r\n            return { ...state, output: { ...state.output, ...action.data } }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport interface Actions {\r\n    setInputImage: (buf: Uint8Array | null) => void,\r\n    setMode: (mode: 'HIDE' | 'FIND') => void,\r\n    setDataToHide: (buf: Uint8Array | null | string) => void,\r\n    setBitLoss: (bitLoss: 2 | 4 | 6 | 8) => void,\r\n    setOutputView: (type: 'PNG' | 'PPNG' | 'PLAIN' | 'HEX') => void,\r\n    startProcess: () => void\r\n}\r\n\r\nexport function makeActions([state, dispatch]: [State, (action: Action) => void]): [State, Actions] {\r\n    return [state, {\r\n        setInputImage(buf: Uint8Array | null) {\r\n            dispatch({ type: 'SET_IMAGE_BUFF', data: buf })\r\n        },\r\n        setMode(mode: 'HIDE' | 'FIND') {\r\n            dispatch({ type: 'SET_MODE', data: mode })\r\n        },\r\n        setDataToHide(buf: Uint8Array | null | string) {\r\n            dispatch({ type: 'SET_DATA_TO_HIDE', data: buf })\r\n        },\r\n        setBitLoss(bitLoss: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8) {\r\n            dispatch({ type: 'SET_BITLOSS', data: bitLoss })\r\n        },\r\n        setOutputView(veiwType) {\r\n            dispatch({ type: 'SET_OUTPUT_VIEW_TYPE', data: veiwType })\r\n        },\r\n        startProcess(){\r\n            dispatch({ type: 'PROCCESS', data: {\r\n                result: null,\r\n                err: null,\r\n                loading: true\r\n            }})\r\n\r\n            const myHandle = (err: null | Error, data: Uint8Array, dataType: string = \"\") => handle(err, data, dataType, state.mode, dispatch)\r\n\r\n            if (state.mode === 'HIDE') {\r\n                // @ts-ignore\r\n                let dataType = state.dataToHide?.type\r\n\r\n                if (typeof state.dataToHide === 'string') {\r\n                    dataType = state.dataToHide.startsWith(\"#!HTML\") ? 'text/html.html' : 'text/plain.txt'\r\n                }\r\n\r\n                PNGWorker.hideData(state.imageBuf!, toUint8Array(state.dataToHide), dataType, state.bitLoss).then(res => {\r\n                    myHandle(null, res.data, res.dataType)\r\n                }).catch(err => {\r\n                    myHandle(err, new Uint8Array(), \"\")\r\n                })\r\n            } else {\r\n                PNGWorker.revealData(state.imageBuf!).then(res => {\r\n                    myHandle(null, res.data, res.dataType)\r\n                }).catch(err => {\r\n                    myHandle(err, new Uint8Array(), \"\")\r\n                })\r\n                // window.PNG.revealData(state.imageBuf!, myHandle)\r\n            }\r\n\r\n            if (matchMedia('screen and (max-width: 860px)').matches) setTimeout(() => window.scrollTo(0, document.body.scrollHeight), 100)\r\n            else window.scrollTo(0, 0)\r\n        }\r\n    }]\r\n}\r\n\r\nconst handle = (err: null | Error, data: Uint8Array, dataType: string = \"\", mode: string, dispatch: (action: Action) => void): void => {\r\n    if (err) {\r\n        alert(err)\r\n        return dispatch({\r\n            type: 'PROCCESS',\r\n            data: {\r\n                result: null,\r\n                err: err,\r\n                loading: false\r\n            }\r\n        })\r\n    }\r\n\r\n    // Force display as PNG if the mode is hide.\r\n    const isImage = dataType.search(/png|gif|jpg|jpeg/gi) >= 0 || mode === 'HIDE'\r\n    const isText = dataType.search(/text/gi) >= 0\r\n\r\n    dispatch({\r\n        type: 'PROCCESS',\r\n        data: {\r\n            result: data,\r\n            err: null,\r\n            loading: false,\r\n            viewType: isImage ? 'PNG' : isText ? 'PLAIN' : 'HEX',\r\n            dataType: mode === 'HIDE' ? 'image-png.png' : dataType\r\n        }\r\n    })\r\n}\r\n\r\nfunction toUint8Array(raw: string | Uint8Array | undefined | null): Uint8Array {\r\n    if ((raw as Uint8Array).buffer) return (raw as Uint8Array)\r\n\r\n    return new TextEncoder().encode(raw as string)\r\n}","import React from 'react';\r\nimport Header from './components/header';\r\nimport Configuration from './components/configuration';\r\nimport Output from './components/output';\r\nimport reducer, { makeActions, initialState } from './duck';\r\nimport { match } from 'assert';\r\n\r\nfunction App() {\r\n\tconst [state, actions] = makeActions(React.useReducer(reducer, initialState));\r\n\tconst matches = useMatchMedia('screen and (max-width: 860px)');\r\n\r\n\tconst showOutput = !matches || (state.output.result);\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Header />\r\n\t\t\t<main>\r\n\t\t\t\t<section>\r\n\t\t\t\t\t<Configuration state={state} actions={actions} />\r\n\t\t\t\t</section>\r\n\t\t\t\t{showOutput && (\r\n\t\t\t\t\t<section>\r\n\t\t\t\t\t\t<Output state={state} actions={actions} />\r\n\t\t\t\t\t</section>\r\n\t\t\t\t)}\r\n\t\t\t</main>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\n// We can move it to duck\r\nconst useMatchMedia = (str: string) => {\r\n\tconst [matches, setMatches]\t= React.useState(matchMedia(str).matches);\r\n\tconst fn = React.useCallback(() => {\r\n\t\tsetMatches(matchMedia(str).matches);\r\n\t}, [str]);\r\n\r\n\tReact.useEffect(() => {\r\n\t\twindow.addEventListener(\"resize\", fn);\r\n\r\n\t\treturn () => {\r\n\t\t\twindow.removeEventListener(\"resize\", fn);\r\n\t\t}\r\n\t}, [fn])\r\n\r\n\treturn matches;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\ndeclare global {\r\n  interface PNG {\r\n    hideData: (\r\n      input: Uint8Array,\r\n      dataToHide: Uint8Array,\r\n      type: string,\r\n      bitLoss: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined,\r\n      callback: (err: Error | null, data: Uint8Array, dataType?: string) => void\r\n    ) => void,\r\n    revealData: (\r\n      input: Uint8Array,\r\n      callback: (err: Error | null, data: Uint8Array, dataType?: string) => void\r\n    ) => void,\r\n    toString: (\r\n      input: Uint8Array,\r\n      callback: (err: Error, str: string) => void\r\n    ) => void\r\n  }\r\n\r\n  interface Window {\r\n    PNG: PNG\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}